//
// BricksAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BricksAPI {

    /**

     - parameter channelId: (path) channelId 
     - parameter userId: (path) a user identification 
     - parameter topicId: (path) a topic identification 
     - parameter limit: (query) limit the results (optional, default to 50)
     - parameter beforeBrickId: (query) get brick befor a give brick id (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getBricks(channelId: String, userId: String, topicId: String, limit: Int? = nil, beforeBrickId: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [Brick]?, _ error: Error?) -> Void)) -> RequestTask {
        return getBricksWithRequestBuilder(channelId: channelId, userId: userId, topicId: topicId, limit: limit, beforeBrickId: beforeBrickId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /api/v1/channels/{channelId}/users/{userId}/topics/{topicId}/bricks
     - get Bricks from a Topic
     - API Key:
       - type: apiKey Authorization (HEADER)
       - name: api_token
     - API Key:
       - type: apiKey ApiSecret (HEADER)
       - name: api_secret
     - parameter channelId: (path) channelId 
     - parameter userId: (path) a user identification 
     - parameter topicId: (path) a topic identification 
     - parameter limit: (query) limit the results (optional, default to 50)
     - parameter beforeBrickId: (query) get brick befor a give brick id (optional)
     - returns: RequestBuilder<[Brick]> 
     */
    open class func getBricksWithRequestBuilder(channelId: String, userId: String, topicId: String, limit: Int? = nil, beforeBrickId: String? = nil) -> RequestBuilder<[Brick]> {
        var localVariablePath = "/api/v1/channels/{channelId}/users/{userId}/topics/{topicId}/bricks"
        let channelIdPreEscape = "\(APIHelper.mapValueToPathItem(channelId))"
        let channelIdPostEscape = channelIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{channelId}", with: channelIdPostEscape, options: .literal, range: nil)
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let topicIdPreEscape = "\(APIHelper.mapValueToPathItem(topicId))"
        let topicIdPostEscape = topicIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{topicId}", with: topicIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "beforeBrickId": (wrappedValue: beforeBrickId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[Brick]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
