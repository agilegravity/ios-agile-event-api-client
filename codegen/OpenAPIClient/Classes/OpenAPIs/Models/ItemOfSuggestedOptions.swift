//
// ItemOfSuggestedOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ItemOfSuggestedOptions: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var name: String?
    public var event: String?
    public var dataStoreTransactions: DataStoreTransactions?
    public var microIntends: [AnyCodable]?
    public var triggedByMicroIntends: [AnyCodable]?
    public var content: Content?
    public var feedback: Feedback?

    public init(id: String? = nil, name: String? = nil, event: String? = nil, dataStoreTransactions: DataStoreTransactions? = nil, microIntends: [AnyCodable]? = nil, triggedByMicroIntends: [AnyCodable]? = nil, content: Content? = nil, feedback: Feedback? = nil) {
        self.id = id
        self.name = name
        self.event = event
        self.dataStoreTransactions = dataStoreTransactions
        self.microIntends = microIntends
        self.triggedByMicroIntends = triggedByMicroIntends
        self.content = content
        self.feedback = feedback
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id = "_id"
        case name
        case event
        case dataStoreTransactions
        case microIntends
        case triggedByMicroIntends
        case content
        case feedback
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(event, forKey: .event)
        try container.encodeIfPresent(dataStoreTransactions, forKey: .dataStoreTransactions)
        try container.encodeIfPresent(microIntends, forKey: .microIntends)
        try container.encodeIfPresent(triggedByMicroIntends, forKey: .triggedByMicroIntends)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(feedback, forKey: .feedback)
    }
}

