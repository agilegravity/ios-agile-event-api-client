//
// Event.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Event: Codable, JSONEncodable, Hashable {

    public enum Scope: String, Codable, CaseIterable {
        case event = "event"
        case session = "session"
        case user = "user"
    }
    static let ownerRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9a-fA-F]{24}$/")
    static let topicRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9a-fA-F]{24}$/")
    static let channelRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9a-fA-F]{24}$/")
    static let accountRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9a-fA-F]{24}$/")
    static let projectRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9a-fA-F]{24}$/")
    static let versionRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9a-fA-F]{24}$/")
    static let nodeItemSourceIdRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9a-fA-F]{24}$/")
    static let idRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9a-fA-F]{24}$/")
    public var eventsource: String?
    public var action: String?
    /** Refers to User */
    public var owner: String?
    /** Refers to Topic */
    public var topic: String?
    /** Refers to Channel */
    public var channel: String?
    /** Refers to Account */
    public var account: String?
    /** Refers to Project */
    public var project: String?
    /** Refers to Version */
    public var version: String?
    public var name: String?
    public var payload: Payload?
    public var scene: Scene?
    public var content: Content?
    public var scope: Scope?
    public var tpKey: String?
    public var options: AnyCodable?
    public var text: String?
    public var suggestedOptions: [ItemOfSuggestedOptions]?
    /** Refers to NodeItem */
    public var nodeItemSourceId: String?
    public var id: String?
    public var createdAt: Date?
    public var updatedAt: Date?

    public init(eventsource: String? = nil, action: String? = nil, owner: String? = nil, topic: String? = nil, channel: String? = nil, account: String? = nil, project: String? = nil, version: String? = nil, name: String? = nil, payload: Payload? = nil, scene: Scene? = nil, content: Content? = nil, scope: Scope? = nil, tpKey: String? = nil, options: AnyCodable? = nil, text: String? = nil, suggestedOptions: [ItemOfSuggestedOptions]? = nil, nodeItemSourceId: String? = nil, id: String? = nil, createdAt: Date? = nil, updatedAt: Date? = nil) {
        self.eventsource = eventsource
        self.action = action
        self.owner = owner
        self.topic = topic
        self.channel = channel
        self.account = account
        self.project = project
        self.version = version
        self.name = name
        self.payload = payload
        self.scene = scene
        self.content = content
        self.scope = scope
        self.tpKey = tpKey
        self.options = options
        self.text = text
        self.suggestedOptions = suggestedOptions
        self.nodeItemSourceId = nodeItemSourceId
        self.id = id
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case eventsource
        case action
        case owner
        case topic
        case channel
        case account
        case project
        case version
        case name
        case payload
        case scene
        case content
        case scope
        case tpKey
        case options
        case text
        case suggestedOptions
        case nodeItemSourceId
        case id = "_id"
        case createdAt
        case updatedAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(eventsource, forKey: .eventsource)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(topic, forKey: .topic)
        try container.encodeIfPresent(channel, forKey: .channel)
        try container.encodeIfPresent(account, forKey: .account)
        try container.encodeIfPresent(project, forKey: .project)
        try container.encodeIfPresent(version, forKey: .version)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(payload, forKey: .payload)
        try container.encodeIfPresent(scene, forKey: .scene)
        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(scope, forKey: .scope)
        try container.encodeIfPresent(tpKey, forKey: .tpKey)
        try container.encodeIfPresent(options, forKey: .options)
        try container.encodeIfPresent(text, forKey: .text)
        try container.encodeIfPresent(suggestedOptions, forKey: .suggestedOptions)
        try container.encodeIfPresent(nodeItemSourceId, forKey: .nodeItemSourceId)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

